# This template will commit the deployed solution to Catalog
# Required variables (can be configured in alm-accelerator-variable-group)
# - catalogSubmitFromEnviroment: the target environment for the deployment that should submit to Catalog. If you want to submit on successful deployment to Production the value should be "Production" 
# - catalogUrl: the url of the environment hosting the Catalog
# - catalogClientId: the Client Id of the App User that has been configured to be allowed to submit to Catalog
# - catalogClientSecret: the Client Secret of the App User that has been configured to be allowed to submit to Catalog
# - catalogTenantId: the Tenant Id of the tenant in which the App User is created
steps:
- pwsh: |
    . "$env:POWERSHELLPATH/load-save-pipeline-parameters.ps1"
    Write-Host "Loading pipeline parameters from $(Agent.BuildDirectory)\deploy-pipeline-parameters.json"
    $parameters = Read-Pipeline-Parameters "$(Agent.BuildDirectory)\deploy-pipeline-parameters.json"
    Write-Host "serviceConnectionName:" $parameters.serviceConnectionName
    Write-Host "serviceConnectionUrl:" $parameters.serviceConnectionUrl
    Write-Host "environmentName:" $parameters.environmentName
    Write-Host "solutionName:" $parameters.solutionName
    Write-Host "importUnmanaged:" $parameters.importUnmanaged
    Write-Host "overwriteUnmanagedCustomizations:" $parameters.overwriteUnmanagedCustomizations
    Write-Host "skipBuildToolsInstaller:" $parameters.skipBuildToolsInstaller
    Write-Host "cacheEnabled:" $parameters.cacheEnabled

    If ($parameters.environmentName -eq "$(catalogSubmitFromEnviroment)") {
      $artifactDropPath = '$(Pipeline.Workspace)/drop/'
      If (Test-Path -Path "$(Pipeline.Workspace)/buildPipeline/drop")
      {
          $artifactDropPath = "$(Pipeline.Workspace)/buildPipeline/drop/"
      }

      #Attempt to find the catalog submission.json file in the build pipeline drop if build and deploy are seperate pipelines
      Get-ChildItem -Path "$artifactDropPath" -Filter "submission.json" | 
        ForEach-Object {
            If ($_.FullName.Contains("submission.json")) 
            { 
                $catalogSubmissionRequest = $_.FullName 
            }
        }

      #Attempt to find the managed solution in the build pipeline drop if build and deploy are seperate pipelines
      Get-ChildItem -Path "$artifactDropPath" -Filter "$solutionName*.zip" | 
        ForEach-Object {
            If ($_.FullName.Contains("_managed")) 
            { 
                $managedSolutionPath = $_.FullName 
            }
        }

      $pacToolsPath = $env:POWERPLATFORMTOOLS_PACCLIPATH + "\pac\tools"

      Invoke-Expression -Command "$pacToolsPath\pac auth create --url $(catalogUrl) --name catalog --applicationId $(catalogClientId) --clientSecret $(catalogClientSecret) --tenant $(catalogTenantId)"

      Write-Host "Publishing solution to Catalog ($(catalogUrl))"
      Invoke-Expression -Command "$pacToolsPath\pac catalog submit -p $catalogSubmissionRequest -sz $managedSolutionPath"
    }
  displayName: 'Publish to Catalog ($(catalogUrl))'
  condition: ne(variables['catalogSubmitFromEnviroment'], '')
