# Create or update branch policy to enforce required reviewers
# https://learn.microsoft.com/en-us/cli/azure/repos/policy?source=recommendations&view=azure-cli-latest

steps:
# add Azure DevOps extension
- script: az extension add -n azure-devops
  displayName: 'Install Azure DevOps Extension'
  enabled: false

# sign in to Azure DevOps
# Use PAT stored in variable group
- script: echo $(PAT) | az devops login
  env:
    AZURE_DEVOPS_CLI_PAT: $(PAT)
  displayName: 'Login Azure DevOps Extension'
  condition: and(succeeded(), or(ne(variables.solutionBranchRequiredReviewers, ''), ne(variables.mainBranchRequiredReviewers, '')))

# create or update Required Reviewer Policy for Solution Branch
- pwsh: |
    if (-not ([string]::IsNullOrEmpty("$(solutionBranchMinimumApproverCount)"))) {
      $minimumApproverCount = "$(solutionBranchMinimumApproverCount)"
      if ("$(solutionBranchCreatorVoteCount)" -eq "true") {
        $creatorVoteCount = $true
      } else {
        $creatorVoteCount = $false
      }
      if ("$(solutionBranchAllowDownVotes)" -eq "true") {
        $allowDownVotes = $true
      } else {
        $allowDownVotes = $false
      }
      if ("$(solutionBranchResetOnSourcePush)" -eq "true") {
        $resetOnSourcePush = $true
      } else {
        $resetOnSourcePush = $false
      }
      # load pipeline parameters
      . "$env:POWERSHELLPATH/load-save-pipeline-parameters.ps1"
      $parameters = Read-Pipeline-Parameters "$(Agent.BuildDirectory)\export-pipeline-parameters.json"
      Write-Host "repo:" $parameters.repo
      $paramRepoName = $parameters.repo
      Write-Host "solutionName:" $parameters.solutionName
      $paramSolutionName = $parameters.solutionName
      
      # get repository id
      $repos = az repos show --org $(System.CollectionUri) --project '$(System.TeamProject)' --repository "$paramRepoName" | ConvertFrom-Json

      # get branch policies
      $policies = az repos policy list --org $(System.CollectionUri) --project '$(System.TeamProject)' --repo $repos.id --branch $parameters.solutionName | ConvertFrom-Json
      
      # check for Minimum Approver Count Policy
      $minimumApproverCountPolicy = $policies | Where-Object {$_.type.displayName -eq "Minimum number of reviewers"}

      If($minimumApproverCountPolicy -eq $null) {
        # Create new Minimum Approver Count Policy 
        Write-Host "Create Required Reviewers Policy"
        az repos policy approver-count create --org $(System.CollectionUri) --project '$(System.TeamProject)' --repo $repos.id --branch $parameters.solutionName --enabled true --blocking true --minimum-approver-count $minimumApproverCount --reset-on-source-push $resetOnSourcePush --allow-downvotes $allowDownVotes --creator-vote-counts $creatorVoteCount
      } else {
        # Update existing Minimum Approver Count Policy
        Write-Host "Update Required Reviewers Policy"
        az repos policy required-reviewer update --id $minimumApproverCountPolicy.id --org $(System.CollectionUri) --project '$(System.TeamProject)' --repo $repos.id --branch $parameters.solutionName --enabled true --blocking true --minimum-approver-count $minimumApproverCount --reset-on-source-push $resetOnSourcePush --allow-downvotes $allowDownVotes --creator-vote-counts $creatorVoteCount
      }
    }

    if (-not ([string]::IsNullOrEmpty("$(solutionBranchRequiredReviewers)"))) {
      # email addresses of the reqiured reviewers
      $requiredReviewers = "$(solutionBranchRequiredReviewers)"

      # load pipeline parameters
      . "$env:POWERSHELLPATH/load-save-pipeline-parameters.ps1"
      $parameters = Read-Pipeline-Parameters "$(Agent.BuildDirectory)\export-pipeline-parameters.json"
      Write-Host "repo:" $parameters.repo
      $paramRepoName = $parameters.repo
      Write-Host "solutionName:" $parameters.solutionName
      $paramSolutionName = $parameters.solutionName
      
      # get repository id
      $repos = az repos show --org $(System.CollectionUri) --project '$(System.TeamProject)' --repository "$paramRepoName" | ConvertFrom-Json

      # get branch policies
      $policies = az repos policy list --org $(System.CollectionUri) --project '$(System.TeamProject)' --repo $repos.id --branch $parameters.solutionName | ConvertFrom-Json
      
      # check for Required Reviewer Policy
      $requiredReviewersPolicy = $policies | Where-Object {$_.type.displayName -eq "Required reviewers"}

      If($requiredReviewersPolicy -eq $null) {
        # Create new Required Reviewer Policy 
        Write-Host "Create Required Reviewers Policy"
        az repos policy required-reviewer create --org $(System.CollectionUri) --project '$(System.TeamProject)' --repo $repos.id --branch $parameters.solutionName --enabled true --blocking true --message "Approval required" --required-reviewer-ids $requiredReviewers
      } else {
        # Update existing Required Reviewer Policy
        Write-Host "Update Required Reviewers Policy"
        az repos policy required-reviewer update --id $requiredReviewersPolicy.id --org $(System.CollectionUri) --project '$(System.TeamProject)' --repo $repos.id --branch $parameters.solutionName --enabled true --blocking true --message "Approval required" --required-reviewer-ids $requiredReviewers
      }
    }

    if(-not ([string]::IsNullOrEmpty("$(mainBranchRequiredReviewers)"))){

      # email addresses of the reqiured reviewers
      $requiredReviewers = "$(mainBranchRequiredReviewers)"

      # load pipeline parameters
      . "$env:POWERSHELLPATH/load-save-pipeline-parameters.ps1"
      $parameters = Read-Pipeline-Parameters "$(Agent.BuildDirectory)\export-pipeline-parameters.json"
      Write-Host "repo:" $parameters.repo
      $paramRepoName = $parameters.repo
      
      # get repository id
      $repos = az repos show --org $(System.CollectionUri) --project '$(System.TeamProject)' --repository "$paramRepoName" | ConvertFrom-Json

      # get branch policies
      $policies = az repos policy list --org $(System.CollectionUri) --project '$(System.TeamProject)' --repo $repos.id --branch main | ConvertFrom-Json
      
      # check for Required Reviewer Policy
      $requiredReviewersPolicy = $policies | Where-Object {$_.type.displayName -eq "Required reviewers"}

      If($requiredReviewersPolicy -eq $null) {
        # Create new Required Reviewer Policy 
        Write-Host "Create Required Reviewers Policy"
        az repos policy required-reviewer create --org $(System.CollectionUri) --project '$(System.TeamProject)' --repo $repos.id --branch main --enabled true --blocking true --message "Approval required" --required-reviewer-ids $requiredReviewers
      } else {
        # Update existing Required Reviewer Policy
        Write-Host "Update Required Reviewers Policy"
        az repos policy required-reviewer update --id $requiredReviewersPolicy.id --org $(System.CollectionUri) --project '$(System.TeamProject)' --repo $repos.id --branch main --enabled true --blocking true --message "Approval required" --required-reviewer-ids $requiredReviewers
      }
    }
  displayName: 'Set Branch Policy'
  condition: and(succeeded(), or(ne(variables.solutionBranchRequiredReviewers, ''), ne(variables.mainBranchRequiredReviewers, '')))
